/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
    id 'java-library'
	id 'java-gradle-plugin'
	id 'groovy'
	id 'maven-publish'
    id 'com.gradle.build-scan' version '2.2.1'
    id 'project-report'
    id 'eclipse'
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    maven {
      url 'https://dl.google.com/dl/android/maven2'
    }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "http://maven2.javacpp.googlecode.com/git/"
    }
    maven {
        url "http://maven2.javacv.googlecode.com/git/"
    }
    
    jcenter()
    
 	flatDir {
        dirs 'libs'
    }
}

dependencies {

   // https://mvnrepository.com/artifact/io.qameta.allure/allure-junit5
    testCompile group: 'io.qameta.allure', name: 'allure-junit5', version: '2.12.1'


    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit4 test framework 
    testImplementation 'junit:junit:4.12'
    
    //Use Junit5 test framework
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.4.2',
            'org.junit.vintage:junit-vintage-engine:5.4.2'
    )
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
	testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.0.0-M4'
    
    
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
	testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.5.1'
    
    //add Commons-Lang library
    implementation 'org.apache.commons:commons-lang3:3.9'
  
    // https://mvnrepository.com/artifact/com.google.guava/guava
	compile group: 'com.google.guava', name: 'guava', version: '11.0.2'
    
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    
    // https://mvnrepository.com/artifact/org.apache.poi/poi
	compile group: 'org.apache.poi', name: 'poi', version: '4.1.0'
	
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
	
	// https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.0'
	
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'

	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'

	// https://mvnrepository.com/artifact/log4j/log4j
	compile group: 'log4j', name: 'log4j', version: '1.2.17'

	// https://mvnrepository.com/artifact/io.appium/java-client
	compile group: 'io.appium', name: 'java-client', version: '7.0.0'
	
	// https://mvnrepository.com/artifact/com.github.2gis.winium/winium-webdriver
	compile group: 'com.github.2gis.winium', name: 'winium-webdriver', version: '0.1.0-1'
	
	// https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
	compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '3.6.2'
	
	// https://mvnrepository.com/artifact/com.aventstack/extentreports
	compile group: 'com.aventstack', name: 'extentreports', version: '3.0.3'
	
	compile fileTree(include: ['*.jar'], dir: 'libs')
	}
	

/*********************************************************************************************************************************
Task run all scripts 
*********************************************************************************************************************************/

//excecute all scripts 
test { 
	filter{
 		includeTestsMatching "**scripts.webdeployment.**" 
	}
 	useJUnitPlatform() 
}

//Chrome + IE + Firefox excecute
6.times { counter -> task "deploy_00$counter"(type: Test, dependsOn: testClasses){ include "**/*AADS_WebDeployment_00$counter"+"*" }}

//task run scripts and create junit report for scripts 
6.times { counter -> task "AADS_WebDeployment_00$counter"(type: Copy) { dependsOn ":deploy_00$counter" }}

//Config all task type:Copy
tasks.withType(Copy) {
	from "$buildDir/test_results/x"
	include "*.xml"
	into "$buildDir/reportJunit"
}

//Config task type: Test 
tasks.withType(Test) {
	ignoreFailures = true //when a scripts error. ignore and continue next scripts
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
    testLogging.showStandardStreams = true //show logging inside scripts to command
    reports {
        junitXml.enabled = true 
        reports.junitXml.destination = file("$buildDir/test_results/x")
        html.enabled = true
        reports.html.destination = file("$buildDir/htmlreport")
    }
 	//here is a improvisation of Duy. Don't care
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
             def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
             def startItem = '|  ', endItem = '  |'
             def repeatLength = startItem.length() + output.length() + endItem.length()
             println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}

//config task open winnium.bat and winappdriver.bat example
task winnium(type: Exec){ 
	workingDir 'C:/Users/HTTP/Desktop'
	commandLine 'cd'
	commandLine 'cmd', '/c', 'Winnium.Desktop.Driver.bat'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
	return standardOutput.toString()
	} 
}
task winappdriver(type: Exec){ 
	workingDir 'C:/Users/HTTP/Desktop'
	commandLine 'cd'
	commandLine 'cmd', '/c', 'WinAppDriver.bat'
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
	return standardOutput.toString()
	} 
}